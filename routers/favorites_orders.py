from typing import Any

from aiogram import Router, F, Bot
from aiogram.filters import or_f, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message, InputMediaDocument

from logger import logger
from middlewares.registered import RegisteredMiddleware
from middlewares.database import DatabaseMiddleware
from middlewares.private import CheckPrivateMessageMiddleware

from database.orm import AsyncOrm

from routers.buttons import buttons as btn
from routers.keyboards import favorites as kb
from routers.messages.find_order import contact_with_client, response_on_order_message
from routers.messages.orders import order_card_to_show
from routers.states.favorites import FavoriteOrders
from schemas.client import Client
from schemas.executor import Executor
from schemas.order import Order


router = Router()

router.message.middleware.register(DatabaseMiddleware())
router.callback_query.middleware.register(DatabaseMiddleware())

router.message.middleware.register(RegisteredMiddleware())
router.callback_query.middleware.register(RegisteredMiddleware())

router.message.middleware.register(CheckPrivateMessageMiddleware())
router.callback_query.middleware.register(CheckPrivateMessageMiddleware())


@router.callback_query(F.data.split("|")[1] == "executor_favorites")
async def favorites_orders(callback: CallbackQuery, session: Any, state: FSMContext) -> None:
    """–í—ã–≤–æ–¥–∏—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"""
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–∂–∏–¥–∞–Ω–∏–∏
    await callback.answer()
    wait_mess = await callback.message.edit_text(f"{btn.WAIT_MSG}")

    executor_tg_id = str(callback.from_user.id)
    executor: Executor = await AsyncOrm.get_executor_by_tg_id(executor_tg_id, session)

    # –ù–∞—á–∏–Ω–∞–µ–º state
    await state.set_state(FavoriteOrders.feed)

    # –ü–æ–ª—É—á–∞–µ–º –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π —É –∫–ª–∏–µ–Ω—Ç–∞
    orders: list[Order] = await AsyncOrm.get_favorites_orders(executor.id, session)

    # –ï—Å–ª–∏ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç
    if not orders:
        msg = "–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤"
        keyboard = kb.back_keyboard()
        await wait_mess.edit_text(msg, reply_markup=keyboard.as_markup())
        return

    current_index = 0

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Å—Ç–µ–π—Ç –≤—Å–µ –∑–∞–∫–∞–∑—ã –∏ —Ç–µ–∫—É—â–∏–π
    await state.update_data(
        orders=orders,
        current_index=current_index
    )

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–∂–∏–¥–∞–Ω–∏–∏
    try:
        await wait_mess.delete()
    except:
        pass

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Ñ–∏–ª–µ–º
    await send_order_card(orders, current_index, callback, state, is_first=True)


# –î–ª—è –ª–∏—Å—Ç–∞–Ω–∏—è –≤–ø—Ä–∞–≤–æ, –≤–ª–µ–≤–æ
@router.callback_query(or_f(F.data == "prev", F.data == "next"), FavoriteOrders.feed)
async def show_order(callback: CallbackQuery, state: FSMContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –∏–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–∫–∞–∑"""
    data = await state.get_data()
    current_index = data["current_index"]
    orders = data["orders"]
    prev_mess = data["prev_mess"]

    # –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –≤–ª–µ–≤–æ
    if callback.data == "prev":
        # –ú–µ–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å
        if current_index == 0:
            current_index = len(orders) - 1
        else:
            current_index -= 1

    # –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –≤–ø—Ä–∞–≤–æ
    elif callback.data == "next":
        # –ú–µ–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å
        if current_index == len(orders) - 1:
            current_index = 0
        else:
            current_index += 1

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å
    await state.update_data(current_index=current_index)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await send_order_card(orders, current_index, prev_mess, state)


# –ù–∞–ø–∏—Å–∞—Ç—å –∑–∞–∫–∞–∑—á–∏–∫—É
@router.callback_query(F.data.split("|")[0] == "write_fav_order", FavoriteOrders.feed)
async def write_to_client_from_favorite(callback: CallbackQuery, state: FSMContext) -> None:
    """–ù–∞–ø–∏—Å–∞—Ç—å –∑–∞–∫–∞–∑—á–∏–∫—É –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"""
    data = await state.get_data()

    orders: list[Order] = data["orders"]
    order: Order = orders[data["current_index"]]

    await state.set_state(FavoriteOrders.contact)

    msg = f"–ó–∞–∫–∞–∑ <b>\"{order.title}\"</b>\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —á–∞—Ç —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–∫–∞–∑—á–∏–∫—É " \
          f"–≤–º–µ—Å—Ç–µ —Å –≤–∞—à–∏–º –æ—Ç–∫–ª–∏–∫–æ–º"
    keyboard = kb.back_to_feed_keyboard()

    await callback.answer()
    prev_mess = await callback.message.edit_text(msg, reply_markup=keyboard.as_markup(),
                                                       disable_web_page_preview=True)
    await state.update_data(prev_mess=prev_mess)


@router.message(FavoriteOrders.contact)
async def get_cover_letter(message: Message, state: FSMContext) -> None:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∏—Å—å–º–∞ –æ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"""
    data = await state.get_data()

    #  –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –±—ã–ª–æ
    try:
        await data["prev_mess"].delete()
    except:
        pass

    # –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–µ —Ç–µ–∫—Å—Ç
    if not message.text:
        prev_mess = await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç",
                                               reply_markup=kb.back_to_feed_keyboard().as_markup())
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await state.update_data(prev_mess=prev_mess)
        return

    # –ú–µ–Ω—è–µ–º —Å—Ç–µ–π—Ç –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
    await state.set_state(FavoriteOrders.send_confirm)

    cover_letter = message.text

    msg = f"–í–∞—à –æ—Ç–∫–ª–∏–∫:\n\n<i>\"{cover_letter}\"</i>\n\n–û—Ç–ø—Ä–∞–≤–ª—è–µ–º?"
    keyboard = kb.confirm_send_cover_letter()
    await message.answer(msg, reply_markup=keyboard.as_markup())

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∏—Å—å–º–∞ –≤ –ø–∞–º—è—Ç—å
    await state.update_data(cover_letter=cover_letter)


@router.callback_query(F.data == "send_cover_letter", FavoriteOrders.send_confirm)
async def send_cover_letter(callback: CallbackQuery, state: FSMContext, session: Any, bot: Bot) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∏—Å—å–º–∞ —Å –æ—Ç–∫–ª–∏–∫–æ–º"""
    await callback.answer()

    data = await state.get_data()

    # –î–∞–Ω–Ω—ã–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
    executor_tg_id = str(callback.from_user.id)
    ex_tg_username = await AsyncOrm.get_username(executor_tg_id, session)
    ex_name = await AsyncOrm.get_executor_name(executor_tg_id, session)

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ –∏ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ
    orders: list[Order] = data["orders"]
    order: Order = orders[data["current_index"]]
    cover_letter = data["cover_letter"]

    msg = f"{btn.SUCCESS} –í–∞—à –æ—Ç–∫–ª–∏–∫ –ø–æ –∑–∞–∫–∞–∑—É \"<i>{order.title}</i>\" –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–∫–∞–∑—á–∏–∫—É!"
    keyboard = kb.back_to_feed_keyboard()

    # –û—Ç–≤–µ—á–∞–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é
    await callback.message.edit_text(msg, reply_markup=keyboard.as_markup())

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
    msg_to_client = response_on_order_message(cover_letter, order, ex_tg_username, ex_name)
    try:
        await bot.send_message(order.tg_id, msg_to_client,
                               message_effect_id="5104841245755180586", disable_web_page_preview=True)    # üî•
        # await bot.send_message("420551454", msg_to_client,
        #                        message_effect_id="5104841245755180586",
        #                        disable_web_page_preview=True)    # TODO DEV VER

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∫–ª–∏–∫–∞ –∑–∞–∫–∞–∑—á–∏–∫—É –ø–æ –∑–∞–∫–∞–∑—É {order.id} –æ—Ç {executor_tg_id}: {e}")


# –£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
@router.callback_query(F.data.split("|")[0] == "delete_fav_order", FavoriteOrders.feed)
async def delete_from_favorite(callback: CallbackQuery, state: FSMContext, session: Any) -> None:
    """–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"""
    executor_tg_id = str(callback.from_user.id)
    order_id = int(callback.data.split("|")[1])
    data = await state.get_data()

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await data["prev_mess"].delete()
    except:
        pass

    # –£–¥–∞–ª—è–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –≤ –ë–î
    try:
        await AsyncOrm.delete_order_from_favorites(executor_tg_id, order_id, session)
    except:
        await callback.message.answer(f"{btn.INFO} –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ")
        return

    prev_mess = await callback.message.answer(f"{btn.SUCCESS} –ó–∞–∫–∞–∑ —É–¥–∞–ª–µ–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö")

    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–π –ª–µ–Ω—Ç—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
    orders = data["orders"]

    # –£–¥–∞–ª—è–µ–º –∏–∑ —Å—Ç–µ–π—Ç–∞ —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
    for order in orders:
        if order.id == order_id:
            orders.remove(order)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
    current_index = 0  # –æ–±–Ω—É–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å
    await state.update_data(
        orders=orders,
        current_index=current_index
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–µ–Ω—Ç—É
    await send_order_card(orders, current_index, prev_mess, state, is_first=True)


# –î–ª—è –æ—Ç–ª–∞–≤–ª–∏–≤–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –Ω–∞–∑–∞–¥ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—É—â–µ–π –ª–µ–Ω—Ç—ã
@router.callback_query(F.data == "back_to_fav_feed",
                       StateFilter(FavoriteOrders.feed, FavoriteOrders.contact, FavoriteOrders.send_confirm))
async def back_to_current_feed(callback: CallbackQuery, state: FSMContext) -> None:
    """–í—ã–≤–æ–¥–∏–º —Ç–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑ –≤ –ª–µ–Ω—Ç–µ"""
    current_state = await state.get_state()

    if current_state != FavoriteOrders.feed:
        await state.set_state(FavoriteOrders.feed)

    data = await state.get_data()

    orders: list[Order] = data["orders"]
    current_index = data["current_index"]

    await send_order_card(orders, current_index, callback, state)


# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ –∑–∞–∫–∞–∑–∞
async def send_order_card(orders: list[Order], current_index: int, message: CallbackQuery | Message,
                          state: FSMContext, is_first: bool = False) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–∞—Ä—Ç–æ—á–∫–æ–π –∑–∞–∫–∞–∑–∞"""
    # –ï—Å–ª–∏ –µ—â–µ –Ω–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –∏–ª–∏ –∏—Ö —É–¥–∞–ª–∏–ª–∏ –≤ –ª–µ–Ω—Ç–µ
    if len(orders) == 0:
        # –ï—Å–ª–∏ –∑–∞–∫–∞–∑ –±—ã–ª 1 –∏ –µ–≥–æ —É–¥–∞–ª–∏–ª–∏
        msg = "–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤"
        keyboard = kb.back_keyboard()

        if isinstance(message, Message):
            try:
                await message.edit_text(msg, reply_markup=keyboard.as_markup())
            except:
                await message.answer(msg, reply_markup=keyboard.as_markup())
        else:
            await message.answer()
            await message.message.edit_text(msg, reply_markup=keyboard.as_markup())
        return

    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–π –∑–∞–∫–∞–∑
    order = orders[current_index]

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    msg = order_card_to_show(order)
    keyboard = kb.favorites_orders_keyboard(orders, current_index)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –∑–∞–∫–∞–∑–∞
    if is_first:
        if isinstance(message, Message):
            prev_mess = await message.answer(msg, reply_markup=keyboard.as_markup())
        else:
            prev_mess = await message.message.answer(msg, reply_markup=keyboard.as_markup())
    else:
        if isinstance(message, Message):
            prev_mess = await message.edit_text(msg, reply_markup=keyboard.as_markup())
        else:
            await message.answer()
            prev_mess = await message.message.edit_text(msg, reply_markup=keyboard.as_markup())

    await state.update_data(prev_mess=prev_mess)


@router.callback_query(F.data.split("|")[0] == "files_for_order")
async def download_files(callback: CallbackQuery, state: FSMContext) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ñ–∞–π–ª–æ–≤ –∑–∞–∫–∞–∑–∞"""
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await callback.answer()
        await callback.message.edit_text(callback.message.text)
    except:
        pass

    data = await state.get_data()

    orders = data["orders"]
    current_index = data["current_index"]

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑
    order = orders[current_index]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã
    files = [InputMediaDocument(media=file.file_id) for file in order.files]
    try:
        await callback.message.answer_media_group(media=files)
    except Exception:
        await callback.message.answer(f"{btn.INFO} –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–æ–≤. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –ø–æ–∑–∂–µ")
    finally:
        await send_order_card(orders, current_index, callback, state, is_first=False)


